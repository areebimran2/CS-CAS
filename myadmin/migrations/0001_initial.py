# Generated by Django 5.2.6 on 2025-09-25 23:09

import common.fields
import common.functions
import django.contrib.auth.models
import django.contrib.postgres.functions
import django.db.models.deletion
import pgtrigger.compiler
import pgtrigger.migrations
import phonenumber_field.modelfields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('common', '0002_pg_enumerated_types'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('key', models.TextField(primary_key=True, serialize=False)),
                ('description', models.TextField(null=True)),
            ],
            options={
                'db_table': 'permissions',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.UUIDField(db_default=django.contrib.postgres.functions.RandomUUID(), primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('description', models.TextField(null=True)),
                ('created_at', models.DateTimeField(db_default=common.functions.TxNow())),
                ('updated_at', models.DateTimeField(db_default=common.functions.TxNow())),
            ],
            options={
                'db_table': 'roles',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.UUIDField(db_default=django.contrib.postgres.functions.RandomUUID(), primary_key=True, serialize=False)),
                ('email', models.EmailField(db_collation='case_insensitive', max_length=254)),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None)),
                ('password', models.CharField(db_column='password_hash', max_length=128)),
                ('twofa_enabled', models.BooleanField(db_default=True)),
                ('twofa_method', models.TextField(choices=[('sms', 'SMS'), ('totp', 'TOTP')], db_default='sms', null=True)),
                ('status', common.fields.PostgresEnumField(choices=[('active', 'Active'), ('suspended', 'Suspended')], db_default='active', enum_type='user_status')),
                ('designation', models.TextField(null=True)),
                ('first_name', models.TextField()),
                ('middle_name', models.TextField(null=True)),
                ('last_name', models.TextField()),
                ('created_at', models.DateTimeField(db_default=common.functions.TxNow())),
                ('updated_at', models.DateTimeField(db_default=common.functions.TxNow())),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='RolePermission',
            fields=[
                ('pk', models.CompositePrimaryKey('role_id', 'perm_key', blank=True, editable=False, primary_key=True, serialize=False)),
                ('perm_key', models.ForeignKey(db_column='perm_key', db_index=False, on_delete=django.db.models.deletion.CASCADE, to='myadmin.permission')),
                ('role', models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, to='myadmin.role')),
            ],
            options={
                'db_table': 'role_permissions',
            },
        ),
        migrations.AddField(
            model_name='role',
            name='permissions',
            field=models.ManyToManyField(related_name='role_permissions', through='myadmin.RolePermission', to='myadmin.permission'),
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('pk', models.CompositePrimaryKey('user_id', 'role_id', blank=True, editable=False, primary_key=True, serialize=False)),
                ('role', models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, to='myadmin.role')),
                ('user', models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_roles',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='roles',
            field=models.ManyToManyField(related_name='user_roles', through='myadmin.UserRole', to='myadmin.role'),
        ),
        migrations.AddConstraint(
            model_name='role',
            constraint=models.UniqueConstraint(fields=('name',), name='roles_name_key'),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='role',
            trigger=pgtrigger.compiler.Trigger(name='trg_roles_updated', sql=pgtrigger.compiler.UpsertTriggerSql(func='\n            BEGIN\n                NEW.updated_at := NOW();\n                RETURN NEW;\n            END;\n            ', hash='bf530f4f1c3d557f0b85d499e636e20201611817', operation='UPDATE', pgid='pgtrigger_trg_roles_updated_eb838', table='roles', when='BEFORE')),
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.UniqueConstraint(fields=('phone',), name='users_phone_key'),
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.UniqueConstraint(fields=('email',), name='users_email_key'),
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.CheckConstraint(condition=models.Q(('twofa_method__in', ['sms', 'totp'])), name='users_twofa_method_check'),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='user',
            trigger=pgtrigger.compiler.Trigger(name='trg_users_updated', sql=pgtrigger.compiler.UpsertTriggerSql(func='\n            BEGIN\n                NEW.updated_at := NOW();\n                RETURN NEW;\n            END;\n            ', hash='df240530b6553c6009b457f74f50fec065132d38', operation='UPDATE', pgid='pgtrigger_trg_users_updated_dac7f', table='users', when='BEFORE')),
        ),
    ]
