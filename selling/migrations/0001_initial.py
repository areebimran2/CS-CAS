# Generated by Django 5.2.6 on 2025-09-26 00:16

import common.fields
import common.functions
import django.contrib.postgres.fields
import django.contrib.postgres.functions
import django.db.models.deletion
import pgtrigger.compiler
import pgtrigger.migrations
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('seasons_sailings', '0001_initial'),
        ('ships_cabins', '0001_initial'),
        ('discounts', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CancellationPolicy',
            fields=[
                ('id', models.UUIDField(db_default=django.contrib.postgres.functions.RandomUUID(), primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('non_refundable', models.BooleanField(db_default=False)),
                ('created_at', models.DateTimeField(db_default=common.functions.TxNow())),
            ],
            options={
                'db_table': 'cancellation_policies',
            },
        ),
        migrations.CreateModel(
            name='CancellationPolicyTier',
            fields=[
                ('id', models.UUIDField(db_default=django.contrib.postgres.functions.RandomUUID(), primary_key=True, serialize=False)),
                ('min_days', models.IntegerField()),
                ('max_days', models.IntegerField()),
                ('charge_type', common.fields.PostgresEnumField(choices=[('percent_total', 'Percent Total'), ('percent_cos', 'Percent COS'), ('fixed_amount', 'Fixed Amount')], enum_type='cancellation_charge_type')),
                ('value', models.DecimalField(decimal_places=4, max_digits=10)),
                ('policy', models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, to='selling.cancellationpolicy')),
            ],
            options={
                'db_table': 'cancellation_policy_tiers',
            },
        ),
        migrations.CreateModel(
            name='Hold',
            fields=[
                ('id', models.UUIDField(db_default=django.contrib.postgres.functions.RandomUUID(), primary_key=True, serialize=False)),
                ('uc_ref', models.TextField()),
                ('expires_at', models.DateTimeField()),
                ('status', common.fields.PostgresEnumField(choices=[('active', 'Active'), ('released', 'Released'), ('expired', 'Expired'), ('converted', 'Converted')], db_default='active', enum_type='hold_status')),
                ('idempotency_key', models.TextField(null=True)),
                ('created_at', models.DateTimeField(db_default=common.functions.TxNow())),
                ('updated_at', models.DateTimeField(db_default=common.functions.TxNow())),
                ('cabin', models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.RESTRICT, to='ships_cabins.cabin')),
                ('sailing', models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, to='seasons_sailings.sailing')),
                ('user', models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'holds',
            },
        ),
        migrations.CreateModel(
            name='ReleaseRequest',
            fields=[
                ('id', models.UUIDField(db_default=django.contrib.postgres.functions.RandomUUID(), primary_key=True, serialize=False)),
                ('reason', models.TextField(null=True)),
                ('created_at', models.DateTimeField(db_default=common.functions.TxNow())),
                ('hold', models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, to='selling.hold')),
                ('requested_by', models.ForeignKey(db_column='requested_by', db_index=False, on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'release_requests',
            },
        ),
        migrations.CreateModel(
            name='ReserveSetting',
            fields=[
                ('id', models.UUIDField(db_default=django.contrib.postgres.functions.RandomUUID(), default=django.contrib.postgres.functions.RandomUUID, primary_key=True, serialize=False)),
                ('max_hold_minutes', models.IntegerField(db_default=2880)),
                ('reminder_scheduled_minutes', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), db_default='{2880, 1440}', size=None)),
                ('allow_extensions', models.BooleanField(db_default=True)),
                ('max_extensions', models.IntegerField(db_default=1)),
                ('extension_minutes', models.IntegerField(db_default=1440)),
                ('created_at', models.DateTimeField(db_default=common.functions.TxNow())),
                ('created_by', models.ForeignKey(db_column='created_by', db_index=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'reserve_settings',
            },
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.UUIDField(db_default=django.contrib.postgres.functions.RandomUUID(), primary_key=True, serialize=False)),
                ('uc_ref', models.TextField()),
                ('snapshot', models.JSONField()),
                ('status', common.fields.PostgresEnumField(db_default='active', enum_type='booking_status')),
                ('idempotency_key', models.TextField(null=True)),
                ('created_at', models.DateTimeField(db_default=common.functions.TxNow())),
                ('updated_at', models.DateTimeField(db_default=common.functions.TxNow())),
                ('cabin', models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.RESTRICT, to='ships_cabins.cabin')),
                ('sailing', models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, to='seasons_sailings.sailing')),
                ('user', models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'bookings',
                'constraints': [models.UniqueConstraint(fields=('idempotency_key',), name='bookings_idempotency_key_key'), models.UniqueConstraint(condition=models.Q(('status', 'active')), fields=('sailing', 'cabin'), name='uidx_bookings_active')],
            },
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='booking',
            trigger=pgtrigger.compiler.Trigger(name='trg_bookings_updated', sql=pgtrigger.compiler.UpsertTriggerSql(func='\n            BEGIN\n                NEW.updated_at := NOW();\n                RETURN NEW;\n            END;\n            ', hash='38f1e2ccb8a65ffe786ff4c2c37f086ab8f92c5b', operation='UPDATE', pgid='pgtrigger_trg_bookings_updated_2d9c1', table='bookings', when='BEFORE')),
        ),
        migrations.AddConstraint(
            model_name='cancellationpolicytier',
            constraint=models.CheckConstraint(condition=models.Q(('min_days__lte', models.F('max_days'))), name='ck_days_order'),
        ),
        migrations.AddConstraint(
            model_name='hold',
            constraint=models.UniqueConstraint(fields=('idempotency_key',), name='holds_idempotency_key_key'),
        ),
        migrations.AddConstraint(
            model_name='hold',
            constraint=models.UniqueConstraint(condition=models.Q(('status', 'active')), fields=('sailing', 'cabin'), name='uidx_holds_active'),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='hold',
            trigger=pgtrigger.compiler.Trigger(name='trg_holds_updated', sql=pgtrigger.compiler.UpsertTriggerSql(func='\n            BEGIN\n                NEW.updated_at := NOW();\n                RETURN NEW;\n            END;\n            ', hash='ebb93e49c729f4f3e896d61907090ba56149b87f', operation='UPDATE', pgid='pgtrigger_trg_holds_updated_a8e2d', table='holds', when='BEFORE')),
        ),
    ]
